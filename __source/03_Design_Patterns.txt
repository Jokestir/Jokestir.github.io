                                                        =========================
                                                            DESIGN PATTERN NOTES
                                                        ==========================


[0] Resources
============================================================================


[0.1] Courses
------------------


+ Course                      : http://www.fluffycat.com/Java-Design-Patterns/)

+ Derek banas videos          : https://www.youtube.com/watch?v=vNHpsC5ng_E&list=PLF206E906175C7E07

+ Head First Design Patterns  : http://www.headfirstlabs.com/books/hfdp/


[0.2] Ask & Search
---------------------

+ Software Stack Overflow      : http://softwareengineering.stackexchange.com


[0.3] Specific links
----------------------

+ Bridge Pattern    http://softwareengineering.stackexchange.com/questions/121326/understanding-the-bridge-design-pattern

+ Bridge search     http://softwareengineering.stackexchange.com/search?q=bridge+pattern


[0.4] Interview Questions
---------------------------


+ Awesome Interview  https://github.com/MaximAbramchuck/awesome-interview-questions#design-patterns

+ InterviewBit      https://www.interviewbit.com




[1] Introduction to Design Patterns
=========================================================================================


[1.1] What is a design pattern?
------------------------------------

Design patterns are `best practise strategies` to solve a `recurring problem`.

Whenever a problem arises, there are two options.

* If the problem is specific, invent a solution
* If the problem is generic and repeating, use design patterns


Questions to be asked when studying a design pattern

1. What is the common recurring problem?
2. What are the best strategies to solve them? (aka design)
3. Sample code
4. Real time use



[1.2] Types of design patterns
------------------------------------


There are 3 types of design patterns (CSB)


     1. Creational design patterns

        Creational design patterns focus on controlling the object creation process

        e.g: Constructor, Factory, Prototype, Singleton, Builder

     2. Structural Design Patterns

        Structural design patterns focus on realizing relationships between different objects.

        e.g: Decorator, facade, Flyweight, Adapter, Proxy

     3. Behavioral design Patterns

        Behavioral design patterns focus on improving or streamlining communication between objects

        e.g: Iterator, Mediator, Observer and mediator.




[2] Singleton design Pattern
=========================================================================================

 Singleton is a creational design pattern.

    ----
     Problem: Design a class so that only one instance of it exists at all times.
    ---

    Example: Earth, Mars etc.



[2.1] Design
------------------------------------------

There are two designs to achieve singularity.


Design  1 - Have a single element enum:

This method is reflection safe.

Though less used, this method is the best.


                ``````````````````````````````````````````````````
                public enum Earth {

                    INSTANCE;

                    public void goRoundTheSun() {

                    }
                }
               `````````````````````````````````````````````````````




Design 2: Private constructor with a static factory.


This method is susceptible to reflection attack.




            ``````````````````````````````````````````````````````````````
            public class Earth{

                // Step 2. static final private ref var.

                private static final Earth instance = new Earth();

                //  Step1. private constructor

                private Earth(){};

                // Step 3 : static factory method

                public static Earth getInstance(){
                    return instance;
                }
            }
            `````````````````````````````````````````````````````````````````




2.2 Real Time Use
--------------------------

+ Logger class to log errors and events. There should only be one per system. Hence singleton.

+ Manager type classes like WiFiManager. Or Controller.


[2.3] Tester Class Code
---------------------------


            `````````````````````````````````````````````````````````````````````````````
            public class SingletonTest{

                    public static void main(String[] args){

                            Earth e1 = Earth.getInstance();

                    Earth e2 = Earth.getInstance();

                    System.out.println(e1==e2);
                    //Above statement should always return true for singleton.
                    }
            }
            ````````````````````````````````````````````````````````````````````````````````
